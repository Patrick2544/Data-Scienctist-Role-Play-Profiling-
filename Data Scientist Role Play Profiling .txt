By Jittapatana (Patrick) Prayoonpruk
2023-November-23

Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table =   10000
ii. Business table =   10000
iii. Category table =  10000
iv. Checkin table =    10000
v. elite_years table = 10000
vi. friend table =     10000
vii. hours table =     10000
viii. photo table =    10000
ix. review table =     10000
x. tip table =         10000
xi. user table =       10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business =     10000
ii. Hours =       1562
iii. Category =   2643
iv. Attribute =   1115
v. Review =       10000 (id)
vi. Checkin =     493 
vii. Photo =      10000 (id)
viii. Tip =       537 (user_id)
ix. User =        10000
x. Friend =       11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:no
	
	
	SQL code used to arrive at answer:

SELECT COUNT(*) 
FROM user
WHERE 
    	id IS NULL OR
    	name IS NULL OR
    	review_count IS NULL OR
    	yelping_since IS NULL OR
    	useful IS NULL OR
    	funny IS NULL OR
    	cool IS NULL OR
    	fans IS NULL OR
    	average_stars IS NULL OR
    	compliment_hot IS NULL OR
    	compliment_more IS NULL OR
    	compliment_profile IS NULL OR
    	compliment_cute IS NULL OR
    	compliment_list IS NULL OR
    	compliment_note IS NULL OR
    	compliment_plain IS NULL OR
    	compliment_cool IS NULL OR
    	compliment_funny IS NULL OR
    	compliment_writer IS NULL OR
    	compliment_photos IS NULL 
	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1.0		max:5.0		avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000	avg:24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

SELECT 
    city,
    SUM(review_count) AS Review
FROM business
GROUP BY city
ORDER BY Review DESC
	
	
	Copy and Paste the Result Below:

+-----------------+--------+
| city            | Review |
+-----------------+--------+
| Las Vegas       |  82854 |
| Phoenix         |  34503 |
| Toronto         |  24113 |
| Scottsdale      |  20614 |
| Charlotte       |  12523 |
| Henderson       |  10871 |
| Tempe           |  10504 |
| Pittsburgh      |   9798 |
| Montréal        |   9448 |
| Chandler        |   8112 |
| Mesa            |   6875 |
| Gilbert         |   6380 |
| Cleveland       |   5593 |
| Madison         |   5265 |
| Glendale        |   4406 |
| Mississauga     |   3814 |
| Edinburgh       |   2792 |
| Peoria          |   2624 |
| North Las Vegas |   2438 |
| Markham         |   2352 |
| Champaign       |   2029 |
| Stuttgart       |   1849 |
| Surprise        |   1520 |
| Lakewood        |   1465 |
| Goodyear        |   1155 |
+-----------------+--------+
(Output limit exceeded, 25 of 362 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

/***********************************************
SELECT 
    stars AS star_rating,
    SUM(review_count) AS count
FROM business
WHERE city = 'Avon'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------------+-------+
| star_rating | count |
+-------------+-------+
|         1.5 |    10 |
|         2.5 |     6 |
|         3.5 |    88 |
|         4.0 |    21 |
|         4.5 |    31 |
|         5.0 |     3 |
+-------------+-------+
*************************************************/
CORRECT ANSWER BELOW:

SELECT 
    stars AS star_rating,
    COUNT(stars) AS count
FROM business
WHERE city = 'Avon'
GROUP BY stars

+-------------+-------+
| star_rating | count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+


ii. Beachwood

/***************************************************************************************
SQL code used to arrive at answer:

SELECT 
    stars AS star_rating,
    SUM(review_count) AS count
FROM business
WHERE city = 'Beachwood'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.0 |     8 |
|         2.5 |     3 |
|         3.0 |    11 |
|         3.5 |     6 |
|         4.0 |    69 |
|         4.5 |    17 |
|         5.0 |    23 |
+-------------+-------+
**************************************************************************************/
CORRECT ANSWER BELOW:

SELECT 
    stars AS star_rating,
    COUNT(stars) AS count
FROM business
WHERE city = 'Beachwood'
GROUP BY stars

+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

SELECT 
    id,
    name,
    review_count
FROM user
ORDER BY review_count DESC
LIMIT 3
		
	Copy and Paste the Result Below:
		
+------------------------+--------+--------------+
| id                     | name   | review_count |
+------------------------+--------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
+------------------------+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	Yes, posing more reviews is one of the factors that users get more fans. However, there are also other factors to take into consideration such as the time they have been yelping, the amount of useful and(or) funny, etc. For example, user name: "eric" has 1116 reviews, but he has only 16 fan even though he has been yelping since 2006. This is because only 1 useful and 4 funny are listed. On the other hand, user name "bernice" has 105 fans with only 255 reviews. Looking at bernice's reviews, we will see that the amount of useful and funny that are listed are much more higher than eric's.

SELECT 
    id,
    name,
    review_count,
    fans,
    yelping_since,
    useful,
    funny
FROM user
WHERE name = 'eric' OR name = 'bernice'
ORDER BY fans DESC

+------------------------+---------+--------------+------+---------------------+--------+-------+
| id                     | name    | review_count | fans | yelping_since       | useful | funny |
+------------------------+---------+--------------+------+---------------------+--------+-------+
| -cv9PPT7IHux7XUc9dOpkg | bernice |          255 |  105 | 2007-08-29 00:00:00 |    120 |   112 |
| -gokwePdbXjfS0iF7NsUGA | eric    |         1116 |   16 | 2007-05-27 00:00:00 |      1 |     4 |
| -Aw9kRoXmFptUMN2XkJY9w | eric    |          115 |    5 | 2010-03-13 00:00:00 |    190 |    93 |
+------------------------+---------+--------------+------+---------------------+--------+-------+

SELECT 
    id,
    name,
    review_count,
    fans,
    yelping_since,
    useful,
    funny
FROM user
ORDER BY fans DESC

+------------------------+-----------+--------------+------+---------------------+--------+--------+
| id                     | name      | review_count | fans | yelping_since       | useful |  funny |
+------------------------+-----------+--------------+------+---------------------+--------+--------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |          609 |  503 | 2007-07-19 00:00:00 |   3226 |   2554 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |          968 |  497 | 2011-03-30 00:00:00 |    257 |    138 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |         1153 |  311 | 2012-11-27 00:00:00 | 122921 | 122419 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |  253 | 2012-12-16 00:00:00 |  17524 |   2324 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |          930 |  173 | 2009-07-08 00:00:00 |   4834 |   6646 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |          813 |  159 | 2009-10-05 00:00:00 |     48 |     13 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |          377 |  133 | 2009-02-05 00:00:00 |   1062 |    672 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |         1215 |  126 | 2015-02-19 00:00:00 |   9363 |   9361 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |          862 |  124 | 2012-04-05 00:00:00 |   9851 |   7606 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |          834 |  120 | 2007-08-14 00:00:00 |    455 |    150 |
| -B-QEUESGWHPE_889WJaeg | Mark      |          861 |  115 | 2009-05-31 00:00:00 |   4008 |    570 |
| -DmqnhW4Omr3YhmnigaqHg | Tiffany   |          408 |  111 | 2008-10-28 00:00:00 |   1366 |    984 |
| -cv9PPT7IHux7XUc9dOpkg | bernice   |          255 |  105 | 2007-08-29 00:00:00 |    120 |    112 |
| -DFCC64NXgqrxlO8aLU5rg | Roanna    |         1039 |  104 | 2006-03-28 00:00:00 |   2995 |   1188 |
| -IgKkE8JvYNWeGu8ze4P8Q | Angela    |          694 |  101 | 2010-10-01 00:00:00 |    158 |    164 |
| -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |         1246 |  101 | 2006-07-19 00:00:00 |   7850 |   5851 |
| -4viTt9UC44lWCFJwleMNQ | Ben       |          307 |   96 | 2007-03-10 00:00:00 |   1180 |   1155 |
| -3i9bhfvrM3F1wsC9XIB8g | Linda     |          584 |   89 | 2005-08-07 00:00:00 |   3177 |   2736 |
| -kLVfaJytOJY2-QdQoCcNQ | Christina |          842 |   85 | 2012-10-08 00:00:00 |    158 |     34 |
| -ePh4Prox7ZXnEBNGKyUEA | Jessica   |          220 |   84 | 2009-01-12 00:00:00 |   2161 |   2091 |
| -4BEUkLvHQntN6qPfKJP2w | Greg      |          408 |   81 | 2008-02-16 00:00:00 |    820 |    753 |
| -C-l8EHSLXtZZVfUAUhsPA | Nieves    |          178 |   80 | 2013-07-08 00:00:00 |   1091 |    774 |
| -dw8f7FLaUmWR7bfJ_Yf0w | Sui       |          754 |   78 | 2009-09-07 00:00:00 |      9 |     18 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri      |         1339 |   76 | 2008-01-03 00:00:00 |   1166 |    220 |
| -0zEEaDFIjABtPQni0XlHA | Nicole    |          161 |   73 | 2009-04-30 00:00:00 |     13 |     10 |
+------------------------+-----------+--------------+------+---------------------+--------+--------+
(Output limit exceeded, 25 of 10000 total rows shown)

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: there are more reviews with the world "love", where love:1780 words and hate:232 words

	
	SQL code used to arrive at answer:

SELECT 
    COUNT(text) AS "hate"
FROM review
WHERE text LIKE '%hate%'

SELECT 
    COUNT(text) AS "love"
FROM review
WHERE text LIKE '%love%'
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

SELECT 
    id,
    name,
    fans
FROM user
ORDER BY fans DESC
LIMIT 10
	
	Copy and Paste the Result Below:

+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

Yes, the 2-3 stars business seems to have a longer hours of operation compared with 4-5 stars business

ii. Do the two groups you chose to analyze have a different number of reviews?
         
Yes, slighly more than half of them has only a single digit number of reviews. Among those, there are some 4-5 stars businesses. The rest has a lot more number of reviews and all of them are 4-5 stars business.

iii. Are you able to infer anything from the location data provided between these two groups? Explain.

The postal_code from all the business are different While knowing the neigherhood of one of the businesses. I don't think we can have any deeper analysis from their location by merely looking at the data provided despite knowing the address of each business.

SQL code used for analysis:

SELECT 
    B.name,
    B.review_count,
    H.hours,
    B.postal_code,
    B.neighborhood,
    B.address,
    CASE
        WHEN hours LIKE '%monday%' THEN 1
		WHEN hours LIKE '%tuesday%' THEN 2
		WHEN hours LIKE '%wednesday%' THEN 3
		WHEN hours LIKE '%thursday%' THEN 4
		WHEN hours LIKE '%friday%' THEN 5
		WHEN hours LIKE '%saturday%' THEN 6
		WHEN hours LIKE '%sunday%' THEN 7 
    END AS order_day,
    CASE
        WHEN B.stars BETWEEN 2 AND 3 THEN '2-3 stars'
        WHEN B.stars BETWEEN 4 AND 5 THEN '4-5 Stars'
    END AS overall_star
FROM business B INNER JOIN hours H ON B.id = H.business_id 
INNER JOIN category C ON B.id = C.business_id
WHERE 
    (B.city = 'Las Vegas') AND (c.category LIKE '%shopping%')
    AND (B.stars BETWEEN 2 AND 3 OR B.stars BETWEEN 4 AND 5)
GROUP BY B.name, B.review_count, H.hours, order_day, overall_star
ORDER BY overall_star ASC;	
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
         
The total reviews of businesses that are still open have a significantly high number compared with the businesses that are close.

ii. Difference 2:
         
The Average stars from open and close business are slightly different with approximately 3.52 stars and 3.67 stars, respectively
         
SQL code used for analysis:

SELECT 
    COUNT(DISTINCT(id)) AS Business,
	AVG(review_count) AS Average_review,
	SUM(review_count) AS Total_reviews,
	AVG(stars) AS Average_stars,
	is_open
	FROM business
	GROUP BY is_open

+----------+--------------------+---------------+-------------------+---------+
| Business |     Average_review | Total_reviews |     Average_stars | is_open |
+----------+--------------------+---------------+-------------------+---------+
|     1520 | 23.198026315789473 |         35261 | 3.520394736842105 |       0 |
|     8480 | 31.757075471698112 |        269300 | 3.679009433962264 |       1 |
+----------+--------------------+---------------+-------------------+---------+	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
	Type of analysis: Predicting the number of fans a user will have
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
	The required data for analysis includes the amount of 'useful,' 'funny,' and 'cool' interactions, which collectively form the total engagement, along with the number of reviews, years on Yelp ('Yelping years'), total compliments received (comprising various types like 'hot,' 'cool,' 'funny,' 'writer,' 'profile,' 'cute,' and 'photos'), total years awarded as an elite user, and the number of friends.

        While the number of friends may have a lesser impact on predicting the number of fans each user possesses, there exist several other significant factors within the dataset that can be leveraged for analysis. These factors may include the frequency and types of interactions (useful, funny, and cool), the longevity of their activity on the platform (Yelping years), the extent of received compliments across diverse categories (such as 'hot,' 'cool,' 'funny,' 'writer,' 'profile,' 'cute,' and 'photos'), the prestige denoted by elite status years, and potentially other unexplored variables. Conducting a comprehensive analysis of these factors could reveal underlying patterns influencing the number of fans a user attracts.  
          
iii. Output of your finished dataset:

+------------------------+-----------+------+--------+--------+--------+------------------+--------------+---------------+-------------------+-------------------+--------------+
| id                     | name      | fans | useful |  funny |   cool | total_engagement | review_count | years_yelping | total_compliments | total_elite_years | friend_count |
+------------------------+-----------+------+--------+--------+--------+------------------+--------------+---------------+-------------------+-------------------+--------------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |   3226 |   2554 |   2751 |             8531 |          609 |            16 |              9650 |                 0 |            0 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |    257 |    138 |    159 |              554 |          968 |            12 |              3421 |                 0 |            0 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 | 122921 | 122419 | 122890 |           368230 |         1153 |            11 |             62796 |                 0 |            0 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |  17524 |   2324 |  15008 |            34856 |         2000 |            11 |              2284 |                 0 |            0 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |   4834 |   6646 |   4321 |            15801 |          930 |            14 |              1005 |                 0 |            0 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |     48 |     13 |      6 |               67 |          813 |            14 |               518 |                 0 |            0 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |   1062 |    672 |   1076 |             2810 |          377 |            14 |              2370 |                 0 |            0 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |   9363 |   9361 |   9370 |            28094 |         1215 |             8 |              1136 |                 0 |            0 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |   9851 |   7606 |   9344 |            26801 |          862 |            11 |             14217 |                 0 |            0 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |    455 |    150 |    342 |             8523 |          834 |            16 |             16425 |                 9 |            0 |
| -B-QEUESGWHPE_889WJaeg | Mark      |  115 |   4008 |    570 |   2765 |             7343 |          861 |            14 |               648 |                 0 |            0 |
| -DmqnhW4Omr3YhmnigaqHg | Tiffany   |  111 |   1366 |    984 |   1279 |             3629 |          408 |            15 |              1376 |                 0 |            0 |
| -cv9PPT7IHux7XUc9dOpkg | bernice   |  105 |    120 |    112 |    109 |              341 |          255 |            16 |               785 |                 0 |            0 |
| -DFCC64NXgqrxlO8aLU5rg | Roanna    |  104 |   2995 |   1188 |    636 |             4819 |         1039 |            17 |              1223 |                 0 |            0 |
| -IgKkE8JvYNWeGu8ze4P8Q | Angela    |  101 |    158 |    164 |    105 |              427 |          694 |            13 |               541 |                 0 |            0 |
| -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |  101 |   7850 |   5851 |   5104 |            18805 |         1246 |            17 |              1573 |                 0 |            0 |
| -4viTt9UC44lWCFJwleMNQ | Ben       |   96 |   1180 |   1155 |   1143 |             3478 |          307 |            16 |              2230 |                 0 |            0 |
| -3i9bhfvrM3F1wsC9XIB8g | Linda     |   89 |   3177 |   2736 |   3019 |             8932 |          584 |            18 |              2552 |                 0 |            0 |
| -kLVfaJytOJY2-QdQoCcNQ | Christina |   85 |    158 |     34 |    102 |              294 |          842 |            11 |               218 |                 0 |            0 |
| -ePh4Prox7ZXnEBNGKyUEA | Jessica   |   84 |   2161 |   2091 |   2067 |             6319 |          220 |            14 |               677 |                 0 |            0 |
| -4BEUkLvHQntN6qPfKJP2w | Greg      |   81 |    820 |    753 |    746 |             2319 |          408 |            15 |              4156 |                 0 |            0 |
| -C-l8EHSLXtZZVfUAUhsPA | Nieves    |   80 |   1091 |    774 |    940 |            11220 |          178 |            10 |              2788 |                 4 |            0 |
| -dw8f7FLaUmWR7bfJ_Yf0w | Sui       |   78 |      9 |     18 |      2 |               29 |          754 |            14 |               185 |                 0 |            0 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri      |   76 |   1166 |    220 |    561 |             1947 |         1339 |            15 |               388 |                 0 |            0 |
| -0zEEaDFIjABtPQni0XlHA | Nicole    |   73 |     13 |     10 |      6 |               29 |          161 |            14 |               301 |                 0 |            0 |
+------------------------+-----------+------+--------+--------+--------+------------------+--------------+---------------+-------------------+-------------------+--------------+
(Output limit exceeded, 25 of 10000 total rows shown)


         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT
   u.id,
   u.name,
   u.fans,
   u.useful,
   u.funny,
   u.cool,
   --total activities (engagement) from the sum of useful, funny, and cool
   SUM(u.useful) + SUM(u.funny) + SUM(u.cool) AS total_engagement,
   u.review_count,
   --compute the total years that user has been yelping 
   STRFTIME('%Y', 'now') - STRFTIME('%Y', u.yelping_since) AS years_yelping,
   /*
   uncommented code below to check the total_compliment
   u.compliment_cool,
   u.compliment_cute,
   u.compliment_funny,
   u.compliment_profile,
   u.compliment_hot,
   u.compliment_writer,
   u.compliment_photos,
   */
   --total compliment from hot, profile, cute, cool, funny, writer, and photos
   SUM(u.compliment_hot) + SUM(u.compliment_profile) + 
   SUM(u.compliment_cute) + SUM(u.compliment_cool) + SUM(u.compliment_funny) +
   SUM(u.compliment_writer) + SUM(u.compliment_photos) AS total_compliments,
   --Total elite years each user has been awarded
   COUNT(DISTINCT ey.year) AS total_elite_years, 
   COUNT(f.user_id) AS friend_count
FROM user u 
LEFT JOIN elite_years ey ON ey.user_id = u.id
LEFT JOIN friend f ON f.user_id = u.id
GROUP BY u.id
ORDER BY fans DESC